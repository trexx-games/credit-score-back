generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// User

model User {
  id        Int       @id @default(autoincrement()) @map("user_id")
  slug      String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  password  String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fields
  contacts  Contact[]
  wallets   Wallet[]
  scores    Score[]
  userEvent UserEvent[]

  @@map("user")
}

model Wallet {
  id        Int      @id @default(autoincrement()) @map("wallet_id")
  slug      String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address   String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  userId    Int      @map("user_id")
  // relations
  user      User     @relation(fields: [userId], references: [id])
  // fields
  scans     Scan[]

  @@index(userId)
  @@map("wallet")
}

// Contact

enum ContactType {
  Email @map("email")
  Phone @map("phone")

  @@map("contact_type")
}

model Contact {
  id        Int         @id @default(autoincrement()) @map("contact_id")
  slug      String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      ContactType
  value     String
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  userId    Int         @map("user_id")
  // relations
  user      User        @relation(fields: [userId], references: [id])

  @@index(userId)
  @@map("contact")
}

// Scan

model Scan {
  id              Int      @id @default(autoincrement()) @map("scan_id")
  slug            String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  transactionHash String   @map("transaction_hash")
  blockHash       String   @map("block_hash")
  data            String
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  walletId        Int      @map("wallet_id")
  eventId         Int      @map("event_id")
  // relations
  wallet          Wallet   @relation(fields: [walletId], references: [id])
  event           Event    @relation(fields: [eventId], references: [id])

  @@index(walletId)
  @@index(eventId)
  @@map("scan")
}

// Score 

model Score {
  id                        Int                       @id @default(autoincrement()) @map("score_id")
  slug                      String                    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  value                     Int
  isActive                  Boolean                   @default(true) @map("is_active")
  createdAt                 DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  userId                    Int                       @map("user_id")
  // relations
  user                      User                      @relation(fields: [userId], references: [id])
  // fields
  scoreContractsBlockchains ScoreContractBlockchain[]

  @@index(userId)
  @@map("score")
}

// Blockchain

model Blockchain {
  id                      Int                       @id @default(autoincrement()) @map("blockchain_id")
  slug                    String                    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String
  token                   String
  url                     String
  isActive                Boolean                   @default(true) @map("is_active")
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fields
  blockchainProtocols     BlockchainProtocol[]
  ScoreContractBlockchain ScoreContractBlockchain[]

  @@map("blockchain")
}

// Protocol 

model Protocol {
  id                  Int                  @id @default(autoincrement()) @map("protocol_id")
  slug                String               @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fields
  blockchainProtocols BlockchainProtocol[]

  @@map("protocol")
}

// BlockchainProtocol

model BlockchainProtocol {
  id           Int        @id @default(autoincrement()) @map("blockchain_protocol_id")
  // fks
  blockchainId Int        @map("blockchain_id")
  protocolId   Int        @map("protocol_id")
  // relations
  blockchain   Blockchain @relation(fields: [blockchainId], references: [id])
  protocol     Protocol   @relation(fields: [protocolId], references: [id])
  // fields
  contracts    Contract[]

  @@index(blockchainId)
  @@index(protocolId)
  @@map("blockchain_protocol")
}

// Category

model Category {
  id        Int        @id @default(autoincrement()) @map("category_id")
  slug      String     @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fields
  contracts Contract[]

  @@map("category")
}

// Contract

model Contract {
  id                        Int                       @id @default(autoincrement()) @map("contract_id")
  slug                      String                    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address                   String
  abi                       Json
  createdAt                 DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  categoryId                Int                       @map("category_id")
  blockchainProtocolId      Int                       @map("blockchain_protocol_id")
  // relations
  category                  Category                  @relation(fields: [categoryId], references: [id])
  blockchainProtocol        BlockchainProtocol        @relation(fields: [blockchainProtocolId], references: [id])
  // fields
  events                    Event[]
  scoreContractsBlockchains ScoreContractBlockchain[]

  @@index(categoryId)
  @@index(blockchainProtocolId)
  @@map("contract")
}

model Event {
  id         Int      @id @default(autoincrement()) @map("event_id")
  slug       String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  weight     Int
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  contractId Int      @map("contract_id")
  // relations
  contract   Contract @relation(fields: [contractId], references: [id])
  // fields
  scans      Scan[]

  @@index(contractId)
  @@map("event")
}

// ScoreContract

model ScoreContractBlockchain {
  id           Int        @id @default(autoincrement()) @map("score_contract_id")
  lastBlock    Int        @map("last_block")
  // fks
  scoreId      Int        @map("score_id")
  contractId   Int        @map("contract_id")
  blockchainId Int        @map("blockchain_id")
  // relations
  score        Score      @relation(fields: [scoreId], references: [id])
  contract     Contract   @relation(fields: [contractId], references: [id])
  blockchain   Blockchain @relation(fields: [blockchainId], references: [id])

  @@index(scoreId)
  @@index(contractId)
  @@index(blockchainId)
  @@map("score_contract")
}

model UserEvent {
  id                        Int                       @id @default(autoincrement())
  event                     String                    
  value                     Int
  createdAt                 DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  // fks
  userId                    Int                       @map("user_id")
  blockchain                String                    
  // relations
  user                      User                      @relation(fields: [userId], references: [id])

  @@index(userId)
  @@map("user_events")
}