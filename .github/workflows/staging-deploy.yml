name: Staging Deployment

on:
  push:
    branches:
      - staging

jobs:
  terraform-ci:
    name: Terraform CI - Staging
    runs-on: ubuntu-latest
    steps:
      - name: Security Scan
        run: echo TODO

  app-ci:
    name: App CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: hous3-digital/trexx-aws-app-backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Unit Testing
        id: unit-testing
        run: echo Unit Testing

      - name: Linting
        id: linting
        run: echo Linting

      - name: Statical Analysis & Security Scan
        id: sonar-cloud
        run: echo Run Sonar Cloud

  terraform-cd:
    name: Deploy Terraform to Staging
    needs: terraform-ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: hous3-digital/trexx-aws-app-backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION  }}

      - name: Load Configs
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: yml
        with:
          config: ${{ github.workspace }}/hous3-pipes.yml

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.9.3"

      - name: fix terraform file permissions for ACT
        if: ${{ github.event.act }}
        run: find /tmp -name "terraform" -type f -exec chmod 755 {} +

      - name: Terraform Apply
        if: ${{ steps.yml.outputs['destroy.enable'] != 'true' && steps.yml.outputs['destroy.confirmation_required'] != 'true' }}
        run: |
          cd infra/terraform
          export TF_LOG=DEBUG
          terraform init -reconfigure
          terraform workspace select staging || terraform workspace new staging
          terraform apply -var-file=envs/staging/variables.tfvars -auto-approve

      - name: Destroy Confirmation
        if: ${{ steps.yml.outputs['destroy.enable'] == 'true' && steps.yml.outputs['destroy.confirmation_required'] == 'true' }}
        run: |
          cd infra/terraform
          export TF_LOG=DEBUG
          terraform init -reconfigure
          terraform workspace select staging || terraform workspace new staging
          terraform destroy -var-file=envs/staging/variables.tfvars -auto-approve

  app-image:
    name: App Image Deploy
    needs: [app-ci, terraform-cd]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: hous3-digital/trexx-aws-app-backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION  }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Print Variables From ECR
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "All Outputs: ${{ steps.login-ecr.outputs }}"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: staging-backend-app
          IMAGE_TAG: latest
        run: |
          cd app/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  app-cd:
    name: App CD
    needs: [app-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: hous3-digital/trexx-aws-app-backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 473542748006.dkr.ecr.us-west-1.amazonaws.com
            docker pull 473542748006.dkr.ecr.us-west-1.amazonaws.com/staging-backend-app:latest
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker run -d -p 3001:3001 -e TREXX_CREDIT_SCORE_CONTRACT -e TREXX_WALLET_KEY -e TREXX_BLOCKCHAIN_URL -e JWT_ACCESS_SECRET -e DATABASE_URL -e PORT -e REDIS_HOST -e REDIS_PORT --log-driver=awslogs --log-opt awslogs-region=us-west-1 --log-opt awslogs-group=/aws/ec2/backend-app 473542748006.dkr.ecr.us-west-1.amazonaws.com/staging-backend-app:latest